export class RouteService {
  #routes;
  #rootUrl;

  constructor({ routes, rootUrl = null }) {
    this.#routes = routes;
    this.#rootUrl = rootUrl;
  }

  has(name) {
    return this.#routes.some((route) => route.name === name);
  }

  createURLWithoutQuery(name, parameters) {
    return this.#create(name, parameters, { withQueryString: false });
  }

  generateFullURL(name, parameters = {}) {
    return this.#create(name, parameters, { withQueryString: true });
  }

  #create(name, parameters, options = { withQueryString: true }) {
    const route = this.#find(name);
    const hostname = this.#getHostname(route);
    const path = this.#replaceNamedParameters(route.uri, parameters);
    const qs = options.withQueryString ? this.#getRouteQueryString(parameters) : null;

    return this.#buildUri(hostname, path, qs);
  }

  #find(name) {
    const route = this.#routes[name] ?? undefined;
    if (route === undefined) {
      throw new Error(`Not found route: ${name}`);
    }
    return route;
  }

  #getHostname(route) {
    return this.#rootUrl || route.host;
  }

  #replaceNamedParameters(uri, parameters) {
    uri = uri.replace(/{(.*?)\??}/g, (match, key) => {
      if (!parameters.hasOwnProperty(key)) {
        return match;
      }
      const value = parameters[key];
      delete parameters[key];
      return value;
    });

    // Strip out any optional parameters that were not given
    return uri.replace(/\/{.[^}]*?\?}/g, "");
  }

  #getRouteQueryString(parameters) {
    return Object.keys(parameters)
      .map((key) => `${key}=${parameters[key]}`)
      .join("&");
  }

  #buildUri(hostname, path, queryString) {
    const removeForwardSlashes = (fragment) => fragment.replace(/(^\/?)|(\/?$)/g, "");
    const url = `${removeForwardSlashes(hostname)}/${removeForwardSlashes(path)}`;

    return [url, queryString].filter((s) => s).join("?");
  }
}

export default RouteService;
